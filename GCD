//
//  ViewController.swift
//  GCD
//
//  Created by Vanshika Shukla on 19/09/20.
//  Copyright © 2020 xyz. All rights reserved.
//

import UIKit

class ViewController: UIViewController {
    
    @IBOutlet weak var imageView: UIImageView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
        //demo()
        
        //syncQueue()
        
        //asyncQueue()
        
        //queuesWithQoS()
        
        //concurrentQueues()
        
        //queueWithDelay()
        
        //globalQueue()
        
        //fetchImage()
        
        //dispatchBarrier()
        
        dispatchGroup()
    }
    
    /*---------------------------------------------------------------------------------------*/
    
    //MARK : Default Queue
    
    func demo()
    {
        for i in 0..<10 {
            print("🔴", i)
        }
        for i in 100..<110 {
            print("Ⓜ️", i)
        }
    }
    
    
    /*---------------------------------------------------------------------------------------*/
    
    //MARK :- SYNC Queue
    
    func syncQueue()
    {
        let queue = DispatchQueue(label: "syncQueue")
        queue.sync {
            for i in 0..<10 {
                print("🔴", i)
            }
        }
        
        for i in 100..<110 {
            print("Ⓜ️", i)
        }
    }
    
    /*---------------------------------------------------------------------------------------*/
    
    //MARK :- ASYNC Queue
    
    func asyncQueue()
    {
        let queue = DispatchQueue(label: "asyncQueue")
        queue.async {
            for i in 0..<10 {
                print("🔴", i)
            }
        }
        
        for i in 100..<110 {
            print("Ⓜ️", i)
        }
    }
    
    /*---------------------------------------------------------------------------------------*/
    
    //MARK : Queues with QoS
    
    func queuesWithQoS() {
        let queue11 = DispatchQueue(label: "queue1", qos: DispatchQoS.background)
        // let queue1 = DispatchQueue(label: "com.appcoda.queue1", qos: DispatchQoS.background)
        let queue22 = DispatchQueue(label: "queue2", qos: DispatchQoS.userInteractive)
        //let queue2 = DispatchQueue(label: "com.appcoda.queue2", qos: DispatchQoS.utility)
        
        queue11.async {
            for i in 0..<10 {
                print("🔴", i)
            }
        }
        queue22.async {
            for i in 100..<110 {
                print("🔵", i)
            }
        }
        DispatchQueue.main.async {
            for i in 1000..<1010 {
                print("Ⓜ️", i)
            }
        }
        
    }
    
    /*---------------------------------------------------------------------------------------*/
    
    //MARK :- Concurrent Queues
    
    func concurrentQueues()
    {
        //let anotherQueue = DispatchQueue(label: "anotherQueue", qos: .utility)
        let anotherQueue = DispatchQueue(label: "anotherQueue", attributes: .concurrent)
        
        anotherQueue.async {
            for i in 0..<10 {
                print("🔴", i)
            }
            
            for i in 0..<10 {
                print(i)
            }
        }
        
        
        anotherQueue.async {
            for i in 100..<110 {
                print("🔵", i)
            }
        }
        
        
        anotherQueue.async {
            for i in 1000..<1010 {
                print("⚫️", i)
            }
        }
        
    }
    
    /*---------------------------------------------------------------------------------------*/
    
    //MARK :- Queues with delay
    
    func queueWithDelay() {
        let delayQueue = DispatchQueue(label: "delayqueue")
        print("Date : \(Date())")
        let additionalTime: DispatchTimeInterval = .seconds(5)
        
        delayQueue.asyncAfter(deadline: .now() + additionalTime) {
            print("Date after delay 1: \(Date())")
        }
    }
    
    /*---------------------------------------------------------------------------------------*/
    
    //MARK :- Global Queue
    
    func globalQueue()
    {
        
        let globalQueue = DispatchQueue.global(qos: .userInteractive)
        let globalQueue1 = DispatchQueue.global(qos: .userInitiated)
        globalQueue.async {
            for i in 0..<10 {
                print("🔴", i)
            }
        }
        
        globalQueue1.async {
            for i in 1000..<1010 {
                print("⚫️", i)
            }
        }
    }
    
    /*---------------------------------------------------------------------------------------*/
    
    //MARK :- Main Queue
    
    func fetchImage() {
        let imageURL: URL = URL(string: "https://upload.wikimedia.org/wikipedia/commons/0/07/Huge_ball_at_Vilnius_center.jpg")!
        
        (URLSession(configuration: URLSessionConfiguration.default)).dataTask(with: imageURL, completionHandler: { (imageData, response, error) in
            
            if let data = imageData {
                print("Did download image data")
                
                DispatchQueue.main.async {
                    self.imageView.image = UIImage(data: data)
                }
                
                
            }
        }).resume()
    }
    
    /*---------------------------------------------------------------------------------------*/
    
    //MARK :- Dispatch Barrier
    
    func dispatchBarrier()
    {
        var value: Int = 2
        
        let concurrentQueue = DispatchQueue(label: "queue", attributes: .concurrent)
        
        concurrentQueue.async(flags: .barrier) {
            for i in 0...3 {
                value = i
                print("\(value) ✴️") // 0 1 2 3
            }
        }
        
        concurrentQueue.async {
            print(value) // 3
        }
        
        concurrentQueue.async(flags: .barrier) {
            for j in 4...6 {
                value = j
                print("\(value) ✡️") //4 5 6
            }
        }
        
        concurrentQueue.async {
            value = 14
            print(value) // 14
        }
    }
    
    /*---------------------------------------------------------------------------------------*/
    
    //MARK :- Dispatch Group
    
    let concurrentQueue = DispatchQueue(label: "com.queue.Concurrent", attributes: .concurrent)
    
    func dispatchGroup()
    {
        print("###### Download all images asynchronously and notify on completion ######")
        print("############")
        print("############\n")
        print("startDate = \(Date())")
        
//                performAsyncTaskIntoConcurrentQueue(with: {
//                    print("\n############")
//                    print("############")
//                    print("###### All images are downloaded at \(Date())")
//                })
        
        concurrencyLooping(with: {
            print("\n############")
            print("############")
            print("###### All images are downloaded at \(Date())")
        })
    }
    
    func performAsyncTaskIntoConcurrentQueue(with completion: @escaping () -> ()) {
        let group = DispatchGroup()
        for i in 1...10 {
            group.enter()
            concurrentQueue.async {
                let imageURL = URL(string: "https://upload.wikimedia.org/wikipedia/commons/0/07/Huge_ball_at_Vilnius_center.jpg")!
                //let _ = try! Data(contentsOf: imageURL)
                print("###### Image \(i) Downloaded ######")
                group.leave()
            }
        }
        
        group.wait()
        DispatchQueue.main.async {
            completion()
        }
        
        //alternate
        /*group.notify(queue: DispatchQueue.main) {
         completion()
         }*/
    }
    
    func concurrencyLooping(with completion: @escaping () -> ())
    {
        let group = DispatchGroup()
        //let _ = DispatchQueue.global(qos: .userInitiated)
        DispatchQueue.concurrentPerform(iterations: 10) { i in
            group.enter()
            concurrentQueue.async {
                let imageURL = URL(string: "https://upload.wikimedia.org/wikipedia/commons/0/07/Huge_ball_at_Vilnius_center.jpg")!
                //let _ = try! Data(contentsOf: imageURL)
                print("###### Image \(i) Downloaded ######")
                group.leave()
            }
        }
        group.wait()
        DispatchQueue.main.async {
            completion()
        }
    }
    
}


