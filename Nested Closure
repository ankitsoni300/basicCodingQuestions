//Nested Closure

func callApiA(completion : @escaping(String) -> ()){
    DispatchQueue.global().asyncAfter(deadline: .now() + 1) {
        print("A done")
        completion("API A Completed")
    }
}

func callApiB(completion : @escaping(String) -> ()){
    DispatchQueue.global().asyncAfter(deadline: .now() + 2) {
        print("B done")
        completion("API B Completed")
    }
}

func callApiC(completion : @escaping(String) -> ()){
    DispatchQueue.global().asyncAfter(deadline: .now() + 3) {
        print("C done")
        completion("API C Completed")
    }
}

func start(){
    callApiA(completion: { (v1 : String) -> () in
        callApiB(completion: { (v2 : String) -> () in
            callApiC(completion: { (v3 : String) -> () in
                print("All completed")
            })
        })
    })
}

start()



// By Dispatch Group


func dispa(){
    let dispatchGroup = DispatchGroup()
    DispatchQueue.global(qos: .background).async(group: dispatchGroup){
        dispatchGroup.enter()
        callApiA { (responseA) in
            dispatchGroup.leave()
        }
        
        dispatchGroup.enter()
        callApiB { (responseB) in
            dispatchGroup.leave()
        }
        
        dispatchGroup.enter()
        callApiC { (responseC) in
            dispatchGroup.leave()
        }
        
        dispatchGroup.notify(queue: .main) {
            print("End")
        }
    }
}

dispa()



