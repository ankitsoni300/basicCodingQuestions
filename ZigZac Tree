import Foundation

class Node{
    var value : Int
    var leftNode : Node?
    var rightNode : Node?
    init(value : Int) {
        self.value = value
    }
}

class BinaryTree{
    var root : Node?
    
    func heightOfTree(node : Node?) -> Int {
        if node == nil{
            return 0
        }else{
            let lHeight = heightOfTree(node: node?.leftNode)
            let rHeight = heightOfTree(node: node?.rightNode)
            if lHeight > rHeight{
                return lHeight + 1
            }else{
                return rHeight + 1
            }
        }
    }
    
    func printLevelOrder() {
        let height = heightOfTree(node: root)
        var ltr = false
        for i in 1...height{
            printGivenLevelOrder(node: root, level: i, ltr: ltr)
            if ltr{
                ltr = false
            }else{
                ltr = true
            }
        }
    }
    
    func printGivenLevelOrder(node : Node?, level : Int, ltr : Bool) {
        if node == nil{
            return
        }
        if level == 1{
            print(node?.value ?? -1)
        }
        else if level > 1{
            if ltr {
                printGivenLevelOrder(node: node?.leftNode, level: level - 1, ltr: ltr)
                printGivenLevelOrder(node: node?.rightNode, level: level - 1, ltr: ltr)
            }else{
                printGivenLevelOrder(node: node?.rightNode, level: level - 1, ltr: ltr)
                printGivenLevelOrder(node: node?.leftNode, level: level - 1, ltr: ltr)
            }
            
        }
    }
}

let obj = BinaryTree()
obj.root = Node(value: 1)
obj.root?.leftNode = Node(value: 2)
obj.root?.rightNode = Node(value: 3)

obj.root?.leftNode?.leftNode = Node(value: 4)
obj.root?.leftNode?.leftNode?.leftNode = Node(value: 6)
obj.root?.leftNode?.rightNode = Node(value: 5)


obj.heightOfTree(node: obj.root)
obj.printLevelOrder()
